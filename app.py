import os
import sys
import time
import pandas as pd
import tempfile
import streamlit as st
from datetime import datetime
from io import StringIO
import traceback
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å scraper
try:
    from company_site_finder.scraper import main as scraper_main
except ImportError:
    from scraper import main as scraper_main

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Streamlit
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ —Å–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π",
    page_icon="üîé",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ–∞–Ω—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
if 'progress' not in st.session_state:
    st.session_state.progress = 0.0
if 'status' not in st.session_state:
    st.session_state.status = "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"
if 'search_running' not in st.session_state:
    st.session_state.search_running = False
if 'total_companies' not in st.session_state:
    st.session_state.total_companies = 0
if 'results' not in st.session_state:
    st.session_state.results = None
if 'output_file' not in st.session_state:
    st.session_state.output_file = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSV-—Ñ–∞–π–ª–∞
def validate_csv(file):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    :param file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    :return: (is_valid, result) - –§–ª–∞–≥ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    try:
        # –ß–∏—Ç–∞–µ–º CSV-—Ñ–∞–π–ª
        df = pd.read_csv(file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        if df.empty:
            return False, "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        valid_columns = ['Company Name', 'company name', 'company_name', 'name', 'Name', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ–º–ø–∞–Ω–∏—è', '–∫–æ–º–ø–∞–Ω–∏—è']
        
        if not any(col in df.columns for col in valid_columns):
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
            if len(df.columns) > 0:
                first_col = df.columns[0]
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                df = df.rename(columns={first_col: 'Company Name'})
                return True, df
            else:
                return False, "–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π"
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–ª–æ–Ω–∫—É, –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –µ–µ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
        for col in valid_columns:
            if col in df.columns:
                df = df.rename(columns={col: 'Company Name'})
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if df['Company Name'].isnull().all():
            return False, "–ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π –ø—É—Å—Ç–∞"
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(subset=['Company Name'])
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        df = df.drop_duplicates(subset=['Company Name'])
        
        return True, df
    
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def save_uploaded_file(uploaded_file):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    :param uploaded_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    :return: (success, path) - –§–ª–∞–≥ —É—Å–ø–µ—Ö–∞ –∏ –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    try:
        os.makedirs('data/input', exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = f"input_{timestamp}.csv"
        file_path = os.path.join('data/input', file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        return True, file_path
    
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

def setup_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        search_engine = st.selectbox(
            "–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
            options=["google", "yandex", "duckduckgo"],
            index=1,  # –Ø–Ω–¥–µ–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª–µ–Ω
            help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π. –Ø–Ω–¥–µ–∫—Å –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π."
        )
        
        # –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        headless = st.checkbox(
            "–§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º",
            value=True,
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –±—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞. –û—Ç–∫–ª—é—á–∏—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
        
        delay_seconds = st.slider(
            "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫)",
            min_value=3,
            max_value=15,
            value=5,
            step=1,
            help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º."
        )
        
        max_retries = st.slider(
            "–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫",
            min_value=1,
            max_value=5,
            value=2,
            step=1,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏."
        )
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
            add_keywords = st.checkbox(
                "–î–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                value=True,
                help="–î–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç')."
            )
            
            thorough_search = st.checkbox(
                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫",
                value=True,
                help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            )
            
            proxy = st.text_input(
                "–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                value="",
                help="–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'ip:port' –∏–ª–∏ 'user:pass@ip:port'."
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings = {
            "search_engine": search_engine,
            "headless": headless,
            "proxy": proxy if proxy else None,
            "search_params": {
                "max_retries": max_retries,
                "delay_seconds": delay_seconds,
                "add_keywords": add_keywords,
                "thorough_search": thorough_search
            }
        }
        
        return settings

def display_search_tips():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫—É"""
    with st.expander("–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–æ–∏—Å–∫–∞", expanded=False):
        st.markdown("""
        ### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
        
        **–í—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:**
        - **–Ø–Ω–¥–µ–∫—Å** - –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π, –Ω–æ –º–æ–∂–µ—Ç —á–∞—â–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
        - **Google** - –∏–º–µ–µ—Ç —à–∏—Ä–æ–∫–∏–π –æ—Ö–≤–∞—Ç, –Ω–æ —á–∞—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
        - **DuckDuckGo** - –º–µ–Ω–µ–µ —Å–∫–ª–æ–Ω–µ–Ω –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ, –Ω–æ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.
        
        **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:**
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û–û–û –ö–æ–º–ø–∞–Ω–∏—è" –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ "–ö–æ–º–ø–∞–Ω–∏—è").
        - –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π —Å –æ–±—â–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°—Ç—Ä–æ–π –ú–æ—Å–∫–≤–∞" –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ "–°—Ç—Ä–æ–π").
        - –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ 7-10 —Å–µ–∫—É–Ω–¥.
        
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:**
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å–∞ –∏–∑ –†–æ—Å—Å–∏–∏ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π.
        
        **–í —Å–ª—É—á–∞–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:**
        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.
        - –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã.
        """)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–ü–æ–∏—Å–∫ —Å–∞–π—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π üîé")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    with st.expander("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", expanded=False):
        st.info("""
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º.
        
        –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π, –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ—Ç –∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã.
        
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π
        2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
        4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    settings = setup_settings()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫—É
    display_search_tips()
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    input_method = st.radio(
        "–°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö",
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª", "–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –≤—Ä—É—á–Ω—É—é"],
        horizontal=True
    )
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    df = None
    input_file_path = None
    
    if input_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª":
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–π", type=["csv"])
        
        if uploaded_file is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            is_valid, result = validate_csv(uploaded_file)
            
            if is_valid:
                df = result
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(df.head(5), use_container_width=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                saved, input_file_path = save_uploaded_file(uploaded_file)
                
                if not saved:
                    st.error(input_file_path)
                    input_file_path = None
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {result}")
    else:
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
        manual_input = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
            height=150,
            help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"
        )
        
        if manual_input:
            companies = [company.strip() for company in manual_input.split('\n') if company.strip()]
            
            if companies:
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞
                df = pd.DataFrame({"Company Name": companies})
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(df.head(5), use_container_width=True)
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                os.makedirs("data/input", exist_ok=True)
                input_file_path = f"data/input/manual_input_{timestamp}.csv"
                df.to_csv(input_file_path, index=False)
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
    if df is not None and input_file_path is not None:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file_dir = "data/output"
        os.makedirs(output_file_dir, exist_ok=True)
        output_file_path = f"{output_file_dir}/results_{timestamp}.csv"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
        start_search = st.button("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", type="primary", disabled=st.session_state.search_running)
        
        # –ë–ª–æ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        progress_placeholder = st.empty()
        
        if start_search or st.session_state.search_running:
            st.session_state.search_running = True
            
            with progress_placeholder.container():
                st.subheader("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Å–∞–π—Ç–æ–≤...")
                progress_bar = st.progress(0.0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_bar.progress(st.session_state.progress)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                status_text = st.empty()
                status_text.text(st.session_state.status)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
                if st.session_state.results is None:
                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
                        result = scraper_main(
                            input_file=input_file_path,
                            output_file=output_file_path,
                            search_engine=settings["search_engine"],
                            headless=settings["headless"],
                            proxy=settings["proxy"],
                            search_params=settings["search_params"]
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                        st.session_state.results = result
                        st.session_state.output_file = output_file_path
                        st.session_state.search_running = False
                        st.session_state.progress = 1.0
                        st.session_state.status = "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
                        
                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                        st.rerun()
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
                        st.code(traceback.format_exc())
                        st.session_state.search_running = False
                        
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ 100%
                    progress_bar.progress(1.0)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    st.success("–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                    if st.session_state.results:
                        result_df = pd.DataFrame({
                            '–ö–æ–º–ø–∞–Ω–∏—è': list(st.session_state.results.keys()),
                            '–°–∞–π—Ç': list(st.session_state.results.values())
                        })
                        
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                        st.dataframe(result_df, use_container_width=True)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º
                        found_count = len([v for v in st.session_state.results.values() if v != "–ù–µ –Ω–∞–π–¥–µ–Ω"])
                        total_count = len(st.session_state.results)
                        found_percent = (found_count / total_count) * 100 if total_count > 0 else 0
                        
                        st.info(f"–ù–∞–π–¥–µ–Ω–æ {found_count} —Å–∞–π—Ç–æ–≤ –∏–∑ {total_count} –∫–æ–º–ø–∞–Ω–∏–π ({found_percent:.1f}%)")
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if st.session_state.output_file and os.path.exists(st.session_state.output_file):
                            with open(st.session_state.output_file, "rb") as file:
                                btn = st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
                                    data=file,
                                    file_name=f"company_sites_{timestamp}.csv",
                                    mime="text/csv"
                                )
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        if st.button("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"):
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                            st.session_state.results = None
                            st.session_state.output_file = None
                            st.session_state.search_running = False
                            st.session_state.progress = 0.0
                            st.session_state.status = "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É"
                            st.rerun()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.caption("¬© 2024 Company Site Finder | –í–µ—Ä—Å–∏—è 0.2.0")

if __name__ == "__main__":
    main() 